version: '3.7'

services:
  nginx:
    build:
      context: ./nginx
      network: host
    image: ${REGISTRY_HOST}/shane/pyperf-nginx:${VERSION}
    deploy:
      mode: global
      resources:
        limits:
          cpus: '2.0'
          memory: 50M
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-public"
        - "traefik.constraint-label=traefik-public"
        - "traefik.http.routers.STACK_NAME-http.rule=Host(${TRAEFIK_HOST})"
        - "traefik.http.routers.STACK_NAME-http.entrypoints=http"
        - "traefik.http.routers.STACK_NAME-http.middlewares=https-redirect"
        - "traefik.http.routers.STACK_NAME-https.rule=Host(${TRAEFIK_HOST})"
        - "traefik.http.routers.STACK_NAME-https.entrypoints=https"
        - "traefik.http.routers.STACK_NAME-https.tls=true"
        - "traefik.http.routers.STACK_NAME-https.tls.certresolver=le"
        - "traefik.http.services.STACK_NAME.loadbalancer.server.port=80"
        - "traefik.http.services.STACK_NAME.loadbalancer.server.scheme=http"
    volumes:
      - app_data:/data
    secrets:
      - source: cssnr_basic_http_auth
        target: /etc/nginx/auth.users
    depends_on:
      - app
      - flower
      - redis-commander
      # - phpmyadmin
    networks:
      - traefik-public
      - net-internal

  pyperf3:
    build:
      context: ./pyperf3
      network: host
    image: ${REGISTRY_HOST}/shane/pyperf3:${VERSION}
    env_file: ${ENV_FILE}
    command: "python3 pyperf3.py"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '3.0'
          memory: 200M
#      labels:
#        - "traefik.enable=true"
#        - "traefik.docker.network=traefik-public"
#        - "traefik.constraint-label=traefik-public"
#        - "traefik.tcp.routers.STACK_NAME-tcp.entrypoints=tcp"
#        - "traefik.tcp.routers.STACK_NAME-tcp.service=STACK_NAME-tcp"
#        - "traefik.tcp.services.STACK_NAME-tcp.loadbalancer.server.port=5201"
#        - "traefik.udp.routers.STACK_NAME-udp.entrypoints=udp"
#        - "traefik.udp.routers.STACK_NAME-udp.service=STACK_NAME-udp"
#        - "traefik.udp.services.STACK_NAME-udp.loadbalancer.server.port=5201"
    ports:
      - "${IPERF_PORT}:${IPERF_PORT}/udp"
      - "${IPERF_PORT}:${IPERF_PORT}/tcp"
    networks:
      - traefik-public
      - net-internal

  app:
    build:
      context: ./app
      network: host
    image: ${REGISTRY_HOST}/shane/pyperf-app:${VERSION}
    env_file: ${ENV_FILE}
    command: "gunicorn pyperf.asgi:application -b 0.0.0.0:9000 -w 2 -k uvicorn.workers.UvicornWorker"
#    healthcheck:
#      test: ["CMD", "curl", "-sf", "http://localhost:9000/app-health-check/"]
#      interval: 1m
#      timeout: 10s
#      retries: 3
#      start_period: 10s
    deploy:
      mode: global
      resources:
        limits:
          cpus: '2.0'
          memory: 500M
    volumes:
      - app_data:/data
    depends_on:
      - redis
    networks:
      - net-internal

  worker:
    image: ${REGISTRY_HOST}/shane/pyperf-app:${VERSION}
    env_file: ${ENV_FILE}
    command: "celery -A pyperf worker -l INFO -c 2"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '2.0'
          memory: 300M
    depends_on:
      - app
      - redis
    networks:
      - net-internal

  beat:
    image: ${REGISTRY_HOST}/shane/pyperf-app:${VERSION}
    env_file: ${ENV_FILE}
    command: "celery -A pyperf beat -l INFO -S django"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '2.0'
          memory: 200M
    depends_on:
      - app
      - redis
    networks:
      - net-internal

  redis:
    image: redis:6-alpine
    command: "redis-server --appendonly yes"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '2.0'
          memory: 50M
    volumes:
      - redis_data:/data
    networks:
      - net-internal

  redis-commander:
    image: ghcr.io/joeferner/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379:0,local:redis:6379:1
      - URL_PREFIX=/redis
      - TRUST_PROXY=true
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '2.0'
          memory: 100M
    depends_on:
      - redis
    networks:
      - net-internal

  flower:
    image: mher/flower:1.2
    env_file: ${ENV_FILE}
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '2.0'
          memory: 100M
    volumes:
      - flower_data:/data
    depends_on:
      - app
      - redis
      - worker
    networks:
      - net-internal

#  phpmyadmin:
#    image: phpmyadmin:latest
#    env_file: ${ENV_FILE}
#    environment:
#      APACHE_PORT: 8082
#      PMA_ABSOLUTE_URI: /phpmyadmin/
#      PMA_HOST: ${DATABASE_HOST}
#      PMA_PORT: ${DATABASE_PORT}
#      PMA_USER: ${DATABASE_USER}
#      PMA_PASSWORD: ${DATABASE_PASS}
#    deploy:
#      replicas: 1
#    networks:
#      - net-internal

secrets:
  cssnr_basic_http_auth:
    external: true

volumes:
  app_data:
  flower_data:
  redis_data:

networks:
  traefik-public:
    external: true
  net-internal:
    driver: overlay
